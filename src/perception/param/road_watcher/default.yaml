# Default parameter of road_watcher

## maximum lookup duration for available tf_transformations [s]
max_tf_lookup_duration: 0.0

lane_width: 0.45      # [m] +/- lane_tolerance for feature point validation
max_lane_width: 0.50
min_lane_width: 0.35
lane_tolerance: 0.1  # [m]

##### gradient detecion, i.e. correlation, parameters #####
gradient_detection_thld: 6
# threshold for the correlation to trigger a feature point finding
step_reference_function_length: 9
# length of the step function to correlate with; greater values lead to more smoothing

##### parameters used for creating scan pattern and #####
##### parallel outer polynomials (relative to fused middle polynomial) #####
sampling_x_start: 0.4
sampling_x_end: 3.0
sampling_x_end_offset: 0.35
sampling_x_step: 0.04
sampling_offset: 10
sampling_offset_range: 0.3
max_curvature_guess: 0.5
# sampling_offset chooses which subsequent endpoint of orthogonals will
# be used to create "grid" scan pattern
# NOTE: this parameter has substantial impact on the ability to
# detect honrizontal steps (orthogonal to the lane markings)!
# If the frontal_obstacle test fails, this is a good indication,
# that this parameter has been changed in a bad way.

min_size_points_width_estimation: 8

degree_of_polynomial: 2
# degree of polynomial to be fitted to lane points
trim_factor: 0.15
# both ends of each scan line is trimmed by this factor

dynamically_restrict_search_pattern: True
# if set to true the search pattern will be limited according to how many /
# until what depth along vehicle x we detect lane points
min_sampling_distance: 1.0
# min distance parallel to vehicle x direction unil which we should look
max_sampling_distance: 2.0
# max distance parallel to vehicle x direction unil which we should look

field_of_vision: {
  top: 90,
  bottom: 550,
  left: 0,
  right: 1280
}

bin_length_clustering: 0.05

#parameters for scan line at region of interest
area_of_interest_step_size: 0.05
reduced_lane_width: 0.25

dbscan: {
  # max distance betweeen points to cluster
  core_epsilon: 0.35,
  # mint amount of core points to initiate a cluster
  min_points_to_be_core: 5
}

#minimum size of clusters used for feature_extraction
min_cluster_size: 9


### classification ###
unidentified_score_threshold: 0.2
# if highest scoring classifier's score lies below this threshold, the
# RoadObject is published as 'Unidentified'

## Should all classifiers be activated
all_classifiers: True

##### foot finder #####
epsilon_newton_method: 0.01
max_iterations_newton_method: 20


##### image patch #####
expand_x: 18
expand_y: 18
# padding added to the border of the bounding rect


##### canny patch #####
threshold1: 500
threshold2: 900
# parameters for the Canny algorithm


##### birdsview (all values in meters) #####
pixel_width: 0.01
offset_before_center: 0.2
offset_after_center: 1.0
offset_right_of_center: 0.6
offset_left_of_center: 0.6

junction_classifier: {
  step_threshold: 10,
  step_dist: 4,
  step_function_lenght: 4,
  step_function_offset: 3,
  min_point_dist: 4,
  rect_add_space_x: 10,
  rect_add_space_y: 2,
  rect_min_x_size: 40,
  rect_min_y_size: 10,
  vertical_offset: 30,

  default_is_stop_line_left: 0.95,
  default_is_stop_line_right: 0.95,
  default_is_give_way_line_left: 0.95,
  default_is_give_way_line_right: 0.95,

  adaptive_thresh_blocksize: 15.0,
  adaptive_thresh_const: -10.0,

  give_way_line_left_mean1_min: 4.5,
  give_way_line_left_mean1_max: 14.0,
  give_way_line_left_mean1_fall_dist: 2.5,

  give_way_line_left_mean0_min: 90,
  give_way_line_left_mean0_max: 215,
  give_way_line_left_mean0_fall_dist: 10,

  angle_diff_min: -0.2,
  angle_diff_max: 0.2,
  angle_diff_fall_dist: 0.05,

  give_way_line_left_dist_middlelane_pca_min: 0.2,
  give_way_line_left_dist_middlelane_pca_max: 0.4,
  give_way_line_left_dist_middlelane_pca_fall_dist: 0.1,

  give_way_line_outer_line_steps_min: 0,
  give_way_line_outer_line_steps_max: 1,
  give_way_line_outer_line_steps_fall_dist: 0,

  give_way_line_middle_line_steps_min: 2,
  give_way_line_middle_line_steps_max: 5,
  give_way_line_middle_line_steps_fall_dist: 1,

  give_way_line_pos_neg_ratio_min: 0.66,
  give_way_line_pos_neg_ratio_max: 1.5,
  give_way_line_pos_neg_ratio_fall_dist: 0.0,

  give_way_line_right_mean1_min: 7,
  give_way_line_right_mean1_max: 14.0,
  give_way_line_right_mean1_fall_dist: 1.5,

  give_way_line_right_mean0_min: 75,
  give_way_line_right_mean0_max: 190,
  give_way_line_right_mean0_fall_dist: 10,

  give_way_line_right_dist_middlelane_pca_min: -0.7,
  give_way_line_right_dist_middlelane_pca_max: -0.16,
  give_way_line_right_dist_middlelane_pca_fall_dist: 0.1,

  stop_line_left_mean0_min: 85,
  stop_line_left_mean0_max: 145,
  stop_line_left_mean0_fall_dist: 10,

  stop_line_left_mean1_min: 6.3,
  stop_line_left_mean1_max: 16,
  stop_line_left_mean1_fall_dist: 2,

  stop_line_left_dist_middlelane_pca_min: 0.13,
  stop_line_left_dist_middlelane_pca_max: 0.22,
  stop_line_left_dist_middlelane_pca_fall_dist: 0.05,

  stop_line_outer_line_steps_min: 0,
  stop_line_outer_line_steps_max: 2,
  stop_line_outer_line_steps_fall_dist: 0,

  stop_line_middle_line_steps_min: 0,
  stop_line_middle_line_steps_max: 1,
  stop_line_middle_line_steps_fall_dist: 0,

  stop_line_pos_neg_ratio_min: 0.8,
  stop_line_pos_neg_ratio_max: 1.2,
  stop_line_pos_neg_ratio_fall_dist: 0.05,

  stop_line_right_mean0_min: 120,
  stop_line_right_mean0_max: 145,
  stop_line_right_mean0_fall_dist: 10,

  stop_line_right_mean1_min: 6.3,
  stop_line_right_mean1_max: 16,
  stop_line_right_mean1_fall_dist: 2,

  stop_line_right_dist_middlelane_pca_min: -0.4,
  stop_line_right_dist_middlelane_pca_max: -0.10,
  stop_line_right_dist_middlelane_pca_fall_dist: 0.05,

  mirror_side_no_median_min: 0,
  mirror_side_no_median_max: 0,
  mirror_side_no_median_fall_dist: 0,

  give_way_middle_line_no_median_min: 3,
  give_way_middle_line_no_median_max: 5,
  give_way_middle_line_no_median_fall_dist: 0,

  stop_middle_line_no_median_min: 0,
  stop_middle_line_no_median_max: 2,
  stop_middle_line_no_median_fall_dist: 2,

  feature_window_height: 11,
  min_point_nr: 8,

  offset_eigenline: 8,
  lenght_eigenline: 12,
  lenght_eigenline_offset: 15,
  lenght_step_ref_func: 2,
  threshold_step_eigenline: 5,
  min_x_dist: 0.9,

  filter_size_median: 3,
}

###Default parameters of Crosswalk Classifier
crosswalk_classifier: {
  black_pixel: 0,
  white_pixel: 255,
  line_offset: 4,
  bottom_line_row: 10,
  min_size_point_vectors: 14,
  canny_thresh_low: 75,
  canny_thresh_high: 100,
  canny_mask_size: 3,
  guessed_lane_width: 0.5,
  step_loc_point: 0.01,
  offset_right_left_bound: 8,
  max_variance: 35,
  min_score: 0.5,
  min_projection_on_lane: 0.12,
  crosswalk_length: 0.45,
  max_lane_width: 0.55,
  min_lane_width: 0.4,
  sampling_x_step: 0.04,
  min_cluster_spread_normal: 0.25,
  nr_lines: 4
}

###Default parameters of RoadClosureClassifier
road_closure_classifier: {
  preprocessing: {
    filter_distance_middle_lane: 0.0,
    filter_distance_right_lane: 0.03,
    horizon: 2.2
  },

  db_scan: {
    inner_lines: {
      core_epsilon: 0.02,
      min_points_to_be_core: 2
    },
    refinement: {
      core_epsilon: 0.1,
      min_points_to_be_core: 3
    },
  },

  additional_scan_lines: {
    window_width: 0.17,
    step_y: 0.02
  },

  ransac: {
    ## set sizes
    minimal_consensus_set_size: 3,


    ## parallel lines
    minimal_model_distance: 0.01,
    expected_nr_of_lines: 4,
    allowed_angle_deviation: deg(10),

    # boundary line
    minimal_model_distance_boundary: 0.02
  },

  model: {
    frontline_angle: deg(60),
    inner_line_angle: deg(27),
    minimal_area_size_x: 0.3,
    min_size_lines: 2,
    min_lateral_distance_to_mp: 0.38,
    min_size_additional_points: 8
  }
}


###Default parameters of ContourClassifier
contour_classifier: {
  min_score_th: 0.5,
  # if teach_in is enabled, all detected contours will be
  # stored in /tmp/contour_templates.XXXXXX
  teach_in: False,
  # image patch binarization
  binarization_c_contour: 10,
  binarization_sigma_contour: 0.2,
  binarization_block_size_contour: 45,
  # for contour alignment, sparse represented contours
  sampling_resolution: 0.001, # [m]
  # padding to be considered inside lane
  min_center_distance_to_boundary: 0.1, # [m]

  max_angle_to_middle_lane: deg(20), # [rad]

  # activate this and all matches are written to /tmp as svg's
  # use it with care as it will write a lot of
  dump_polygons: False, # [bool]

  # the zero is not considered for the matching score
  # but it has to match at least this value
  min_zero_match_score: 0.35,

  # defines a range along the middle lane polynomial to cluster
  # detected contours based on their center of gravity
  cluster_range: 0.1, #[m]

  # it might happen, that fairly small (outlier) contours are
  # detected within the right lane. filter them by their area
  min_contour_area: 0.005 # [m^2]
}

start_line_classifier: {
  min_score_ratio: 2.0,
  max_angle_delta: 0.2,
  harris_corner_threshold: 150,
  mean_step_size: 0.04,
  step_det_use_abs: False,
  harris_block_size: 9,
  sobel_window: 3,
  harris_k: 0,
  minimal_harris_max: 0.0005,
  min_nr_points: 7,
  line_shift: 0.15,
  step_det_ref_func_length: 3,
  step_det_thld: 10,
  fixed_score_start_line: 0.8,
  half_startline_length: 0.015
}

no_passing_zone_classifier: {

 scan_right : 0.04,
 scan_left : 0.07,
 step_threshold : 10,
 step_length : 3,
 max_line_line_dev : 0.3,
 max_line_space_dev : 0.8,
 line_width : 0.020,
 max_line_width_dev : 0.4,
 min_length_np_zone : 0.2,
 two_solid_lines_quad_double_relation : 10
}

obstacle_classifier_new: {

  foot_finder: {
    epsilon_newton_method: 0.01,
    max_iterations_newton_method: 20
  },


  roi: {
    roi_height_in_m: 0.1,
    area_roi_extension_in_m: 0.1,
    min_roi_width_in_m: 0.42,
    min_roi_length_in_m: 0.25,
    max_roi_width_in_m: 0.8,
    max_roi_length_in_m: 2
  # Note: reducing roi size might lead to roi without obstacle
  # (eg. multiple road objects are clustered together the roi might
  # be much bigger than the max. obstacle dimensions
  },


  obstacle_dimension: {
    min_obstacle_width: 0.1,
    min_obstacle_height: 0.1,
    min_obstacle_length: 0.1,
    max_obstacle_width: 0.4,
    max_obstacle_height: 0.24,
    max_obstacle_length: 0.5,
    #max obstacle length is not defined in the regulations but some upper value assumed here

    default_obstacle_size: 0.3

  },

  front_model: {
    distance_thld_pixel: 3,

    ### defining yi = f(xi): with syntax: [x1, y1, x2, y2, ...]###
    b0_edge_cnt_eval_fct: [0,0,  5,0.9,  25,1],
    v0_edge_cnt_eval_fct: [0,0,  4,0.9,  25,1],
    b1_edge_cnt_eval_fct: [0,0,  5,0.9,  25,1],
    penalized_pts_eval_fct: [0,1, 3,0.9, 15,0],
    gray_mean_eval_fct: [60,0, 90,0.9, 100,1],
    gray_stddev_eval_fct: [0,0.5,  4,1,  15,1,  50,0.5,  80,0],
    vertical_angle_image_eval_fct: [0.04,1,  0.1,0.8,  0.25,0],
    ground_lines_angle_eval_fct: [0.07,1, 0.15, 0.8, 0.3,0],


    incomplete_model_penalty: 0.9,

    max_incline_angle: 0.1,
    #angle tolerance in 2d image added ontop the assumed possible vertical angles considering the max incline angle of the track
    vertical_angle_tolerance_image: 0.1,

    #allowed tolerance of ground line angles in vehicle coordinates (assume z=0)
    ground_line_perpendicular_angle_tolerance: 0.3,

    #the 2nd griund line must show further out than this thld
    gndline2_visible_angle_thld: 0.2,

    histogram_init_value: 0.05,

   ### min of(model width, height, length)
   min_model_size_in_m: 0.092

  },


  ransac: {
    max_iteration: 100,
    min_data_set_size: 4,
    min_model_score_thld: 0.25,
    max_it_rand_L_lines_pts_select: 100,
    max_it_2nd_gnd_model_extension: 50
  },


  fp_detection: {
    # STEP DETECTION
    step_thld: 10,
    step_func_size: 5,

    # SCAN LINE GENERATION
    min_scan_line_length_in_pxl: 7,
    #gives the ratio with which scan lines are placed
    #(eg. 1 => every pixel gets a scan line; 0.5 => every second pixel..).
    scan_line_density: 0.2,

    # LANE LINE_REMOVAL
    lane_line_removal_thld_in_m: 0.02,

    #BASE HULL ESTIMATION
    base_estimate_scan_line_spacing_in_m: 0.02,
    base_estimate_number_of_scan_lines: 3,
    base_estimate_scan_line_edge_overlap_in_m: 0.025
  }
}
